{"mappings":"YAAA,IAAMA,EAAkBC,SAASC,kBAAkB,SAC7CC,EAAiBF,SAASC,kBAAkB,QAC5CE,EAAcH,SAASC,kBAAkB,UACzCG,EAAMJ,SAASK,cAAc,UAG/BC,EAAa,KAGbC,EAAS,KAGbH,EAAII,iBAAiB,SAIrB,SAAuBC,EAAUC,GAGlBX,EAAgB,GAAGY,MAEhCJ,EAASJ,EAAY,GAAGQ,MAIxB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAC5BF,EAAQR,EAAe,GAAGS,MAC9BL,EAAaO,aAAY,WACrB,IAAMC,EAAU,IAAIA,GAAQ,SAACC,EAASC,GAEdC,KAAKC,SAAW,IAGpCH,EAAQN,EAAUC,GAClBS,QAAQC,IAAIL,KAIZC,EAAQP,EAAUC,GAClBS,QAAQC,IAAIJ,G,GAEbN,E,IAKPW,cAAcf,E","sources":["src/js/03-promises.js"],"sourcesContent":["const inputFirstDelay = document.getElementsByName('delay');\nconst inputStepDelay = document.getElementsByName('step');\nconst inputAmount = document.getElementsByName('amount'); \nconst btn = document.querySelector('button');\n    \nlet positionPromise = null;\nlet intervalId = null;\nlet delay = null;\nlet firstDelay = null;\nlet amount = null;\nlet timeoutId = null;\n\nbtn.addEventListener('click', createPromise);\n\n\n\nfunction createPromise(position, delay) {\n\n  // location.reload();\n  firstDelay = inputFirstDelay[0].value;\n\n  amount = inputAmount[0].value;\n\n  // timeoutId = setTimeout(() => {\n \n  for (let i = 1; i <= amount; i += 1) {\n        delay = inputStepDelay[0].value;\n    intervalId = setInterval(() => {\n        const Promise = new Promise((resolve, reject) => {\n       \n          const shouldResolve = Math.random() > 0.3;\n          if (shouldResolve) {\n            // Fulfill\n            resolve(position, delay )\n            console.log(resolve);\n            \n          } else {\n            // Reject\n            reject( position, delay )\n            console.log(reject);\n          }\n        }, delay)\n      }\n    // }, firstDelay);\n    )\n    // return Promise;\n    clearInterval(intervalId);\n  }\n  \n  // clearTimeout(timeoutId);\n\n \n};\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// ававаіаааааааааааааааааааааааааааааааааааав\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve ,reject) =>{\n//   event.preventDefault();\n//   console.log(position);\n  \n//   firstDelay = inputFirstDelay[0].value;\n//   console.log(firstDelay);\n\n//   delay = inputStepDelay[0].value;\n//   console.log(delay);\n\n//   setTimeout(() => {\n    \n//     intervalId = setInterval(() =>{\n//   for (let i = 1; i <= inputAmount[0].value; i += 1) {\n//     positionPromise  +=1;\n//     console.log(position.currentTarget);\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       // Fulfill\n//       resolve('position');\n//       // console.dir(positionPromise);\n//     } else {\n//       // Reject\n//       reject('dfsds');\n//       // console.dir(positionPromise);\n//     }\n\n//    if (inputAmount[0].value == positionPromise) {\n//       clearInterval(intervalId);\n//     }\n    \n//   }}, delay)\n  \n \n//    }, firstDelay);\n// })};\n\n\n\n// аваіаівівіааіаіаіаіаввввввввввввввввв\n\n\n\n// const btnDisabled = () => {\n//   btn.disabled = true;\n// };\n\n// function createPromise(position, delay) {\n\n//   btnDisabled();\n//   firstDelay = inputFirstDelay[0].value;\n// return new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     delay = inputStepDelay[0].value;\n     \n//          intervalId = setInterval(() => {\n//       positionPromise += 1;\n//           let position = positionPromise;\n//       let amount = inputAmount[0].value;\n     \n//       if (amount == positionPromise) {\n//         clearInterval(intervalId);\n//         // location.reload();\n//       }\n      \n//       const shouldResolve = Math.random() > 0.3;\n//         if (shouldResolve) {\n//   Promise\n//         .then(({ position, delay }) => {\n//           console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         // Fulfill\n//         resolve(position, delay);\n//       // console.log(position);\n//       console.dir(resolve());\n      \n//       } else {\n//         reject({position,delay});\n//           console.dir(reject());\n//         // console.dir(position);\n//         // reject\n//          Promise.catch(({ position, delay }) => {\n//           console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//         });\n//       }\n//          }, delay) \n    \n\n//   }, firstDelay)})\n//     // return promise;\n// };\n\n \n        "],"names":["$ce04d3a99e08e73b$var$inputFirstDelay","document","getElementsByName","$ce04d3a99e08e73b$var$inputStepDelay","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$btn","querySelector","$ce04d3a99e08e73b$var$intervalId","$ce04d3a99e08e73b$var$amount","addEventListener","position","delay1","value","i","setInterval","Promise","resolve","reject","Math","random","console","log","clearInterval"],"version":3,"file":"03-promises.c4141d30.js.map"}